using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using MongoDB.Bson;
using MongoDB.Driver;
using VulnerabilityManagementService.Model;

namespace VulnerabilityManagementService.Repository
{
    public class MongoDbManager : IMongoDbManager
    {
        private readonly IMongoDatabase _database;
        private const string VulnerabilityCollection = "vulnerabilities";
        private const string ProjectCollection = "projects";

        public MongoDbManager(IConfiguration configuration)
        {
            var mongoClient = new MongoClient(configuration.GetValue<string>("MongoDb:ConnectionString"));
            _database = mongoClient.GetDatabase(configuration.GetValue<string>("MongoDb:Database"));
        }

        public async Task<List<Vulnerability>> GetAllVulnerabilities()
        {
            var vulnerabilities = _database.GetCollection<Vulnerability>(VulnerabilityCollection);
            var filter = new FilterDefinitionBuilder<Vulnerability>().Empty;
            try
            {
                var results = await vulnerabilities.Find(filter).ToListAsync();
                return results;
            }
            catch (Exception e)
            {
                throw new Exception(e.Message);
            }
        }

        public async Task<List<Project>> GetAllProjects()
        {
            var projects = _database.GetCollection<Project>(ProjectCollection);
            var filter = new FilterDefinitionBuilder<Project>().Empty;
            try
            {
                var results = await projects.Find(filter).ToListAsync();
                return results;
            }
            catch (Exception e)
            {
                throw new Exception(e.Message);
            }
        }

        public async Task<List<Vulnerability>> GetVulnerabilitiesByProjectId(int pid)
        {
            var vulnerabilities = _database.GetCollection<Vulnerability>(VulnerabilityCollection);
            var filter = new FilterDefinitionBuilder<Vulnerability>().Eq(v => v.ProjectId, pid);
            try
            {
                var results = await vulnerabilities.Find(filter).ToListAsync();
                return results;
            }
            catch (Exception e)
            {
                throw new Exception(e.Message);
            }
        }

        public async Task UpdateVulnerabilityAsync(Vulnerability vulnerability)
        {
            var vulnerabilities = _database.GetCollection<Vulnerability>(VulnerabilityCollection);

            try
            {
                var vulnerabilityFilter = Builders<Vulnerability>.Filter.Eq("Id", vulnerability.Id);
                await vulnerabilities.FindOneAndReplaceAsync(vulnerabilityFilter, vulnerability);
            }
            catch (Exception e)
            {
                throw new Exception(e.Message);
            }
        }

        public async Task DeleteVulnerabilityAsync(Vulnerability vulnerability)
        {
            var vulnerabilities = _database.GetCollection<Vulnerability>(VulnerabilityCollection);

            try
            {
                var vulnerabilityFilter = Builders<Vulnerability>.Filter.Eq("Id", vulnerability.Id);
                await vulnerabilities.FindOneAndDeleteAsync(vulnerabilityFilter);
            }
            catch (Exception e)
            {
                throw new Exception(e.Message);
            }
        }

        public async Task UpdateProjectAsync(Project project)
        {
            var projects = _database.GetCollection<Project>(ProjectCollection);

            try
            {
                var projectFilter = Builders<Project>.Filter.Eq("Id", project.Id);
                await projects.FindOneAndReplaceAsync(projectFilter, project);
            }
            catch (Exception e)
            {
                throw new Exception(e.Message);
            }
        }

        public async Task DeleteProjectAsync(Project project)
        {
            var projects = _database.GetCollection<Project>(VulnerabilityCollection);

            try
            {
                var projectFilter = Builders<Project>.Filter.Eq("Id", project.Id);
                await projects.FindOneAndDeleteAsync(projectFilter);
            }
            catch (Exception e)
            {
                throw new Exception(e.Message);
            }
        }
    }
}
