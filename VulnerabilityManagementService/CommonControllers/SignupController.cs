using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using VulnerabilityManagementService.Helper;
using VulnerabilityManagementService.Model;
using VulnerabilityManagementService.Repository;

namespace VulnerabilityManagementService.CommonControllers
{
    [Route("api/Signup")]
    public class SignupController : ControllerBase
    {
        private readonly UserRepository _userRepository;
        private readonly IConfiguration _configuration;
        private readonly ILogger<SignupController> _logger;

        public SignupController(IConfiguration configuration, ILogger<SignupController> logger)
        {
            _userRepository = new UserRepository(configuration);
            _configuration = configuration;
            _logger = logger;
        }

        [HttpPost]
        public async Task<IActionResult> SignupAsync([FromBody] User user)
        {
            try
            {
                var userId = _userRepository.RegisterUser(user).Result;

                if (userId == string.Empty)
                    return Forbid($"Username {user.UserName} already exists");

                //Send activation email
                var token = _userRepository.GenerateActivationTokenUrl(user).Result;
                var mailJet = new MailjetManager(_configuration);
                await mailJet.SendAccountActivationEmailAsync(user, token);

                return Ok();
            }
            catch (Exception e)
            {
                _logger.LogError($"Exception thrown while registering new user: {e.Message}");
            }

            return BadRequest("Unable to Register user");
        }

        [HttpPost("checkuser")]
        public IActionResult CheckUser([FromBody] User user)
        {
            try
            {
                var existingUser = _userRepository.GetUserByUsername(user.UserName);

                return Ok(existingUser);
            }
            catch (Exception e)
            {
                _logger.LogError($"Exception thrown while validating user Token: {e.Message}");
                return BadRequest(e.Message);
            }
        }

        [HttpPost("activation/{token}")]
        public async Task<IActionResult> ActivateAccount(string token)
        {
            try
            {
                var dbUser = _userRepository.GetUserByActivationToken(token);

                if (dbUser == null)
                {
                    return Ok();
                }

                dbUser.IsActivated = true;

                await _userRepository.UpdateUserAsync(dbUser);

                return Ok();
            }
            catch (Exception e)
            {
                _logger.LogError($"Exception thrown while activating user account: {e.Message}");
            }

            return BadRequest("Unable to activate user account");
        }
    }
}