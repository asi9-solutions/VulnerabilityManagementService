using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using VulnerabilityManagementService.Helper;
using VulnerabilityManagementService.Model;
using VulnerabilityManagementService.Repository;

namespace VulnerabilityManagementService.Controllers
{
    [Authorize]
    [Route("api/[controller]")]
    [ApiController]
    public class VulnerabilityController : Controller
    {
        private readonly IMongoDbManager _mongoDbManager;
        private readonly ILogger<VulnerabilityController> _logger;

        public VulnerabilityController(IMongoDbManager mongoDbManager, ILogger<VulnerabilityController> logger)
        {
            _mongoDbManager = mongoDbManager;
            _logger = logger;
        }

        [HttpGet]
        public async Task<IActionResult> GetAllVulnarability()
        {
            try
            {
                var vulnerabilities = await _mongoDbManager.GetAllVulnerabilities();

                return Ok(JsonConvert.SerializeObject(vulnerabilities));
            }
            catch (Exception e)
            {
                _logger.LogError($"Exception thrown while getting vulnerabilities: {e.Message}");
            }

            return BadRequest("Error getting all vulnerabilities");
        }

        [HttpGet("projectvulnerability/{pid}")]
        public async Task<IActionResult> GetVulnerabilityByProject(int pid)
        {
            try
            {
                var vulnerabilities = await _mongoDbManager.GetVulnerabilitiesByProjectId(pid);

                if (vulnerabilities == null)
                    return NotFound("No Vulnerabilities found");

                return Ok(JsonConvert.SerializeObject(vulnerabilities));
            }
            catch (Exception e)
            {
                _logger.LogError($"Exception thrown while getting vulnerabilities for project: {e.Message}");
            }

            return BadRequest("Could not get vulnerabilities for project");
        }

        [HttpPost("updatevulnerability")]
        public async Task<IActionResult> UpdateVulnerability([FromBody] Vulnerability vulnerability)
        {
            try
            {
                await _mongoDbManager.UpdateVulnerabilityAsync(vulnerability);

                return Ok();
            }
            catch (Exception e)
            {
                _logger.LogError($"Exception thrown while updating vulnerability: {e.Message}");
            }

            return BadRequest("Unable to update vulnerability");
        }

        [HttpPost("deletevulnerability")]
        public async Task<IActionResult> DeleteVulnerability([FromBody] Vulnerability vulnerability)
        {
            try
            {
                await _mongoDbManager.DeleteVulnerabilityAsync(vulnerability);

                return Ok();
            }
            catch (Exception e)
            {
                _logger.LogError($"Exception thrown while deleting vulnerability: {e.Message}");
            }

            return BadRequest("Unable to delete vulnerability");
        }

    }
}