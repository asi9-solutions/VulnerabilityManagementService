using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using VulnerabilityManagementService.Model;
using VulnerabilityManagementService.Repository;

namespace VulnerabilityManagementService.Controllers
{
    [Authorize]
    [Route("api/[controller]")]
    [ApiController]
    public class ProjectController : ControllerBase
    {
        private readonly IMongoDbManager _mongoDbManager;
        private readonly ILogger<ProjectController> _logger;

        public ProjectController(IMongoDbManager mongoDbManager, ILogger<ProjectController> logger)
        {
            _mongoDbManager = mongoDbManager;
            _logger = logger;
        }

        [HttpGet]
        public IActionResult GetAllVulnarability()
        {
            try
            {
                var projects = _mongoDbManager.GetAllProjects();

                return Ok(JsonConvert.SerializeObject(projects.Result));
            }
            catch (Exception e)
            {
                _logger.LogError($"Exception thrown while getting list of projects: {e.Message}");
            }

            return BadRequest("Error getting all projects");
        }

        [HttpPost("updateproject")]
        public async Task<IActionResult> UpdateProject([FromBody] Project project)
        {
            try
            {
                await _mongoDbManager.UpdateProjectAsync(project);

                return Ok();
            }
            catch (Exception e)
            {
                _logger.LogError($"Exception thrown while updating project: {e.Message}");
            }

            return BadRequest("Unable to update project");
        }

        [HttpPost("deleteproject")]
        public async Task<IActionResult> DeleteProject([FromBody] Project project)
        {
            try
            {
                await _mongoDbManager.DeleteProjectAsync(project);

                return Ok();
            }
            catch (Exception e)
            {
                _logger.LogError($"Exception thrown while deleting project: {e.Message}");
            }

            return BadRequest("Unable to delete project");
        }

    }
}