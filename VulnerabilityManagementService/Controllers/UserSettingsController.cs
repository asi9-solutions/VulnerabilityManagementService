using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using VulnerabilityManagementService.Model;
using VulnerabilityManagementService.Repository;

namespace VulnerabilityManagementService.Controllers
{
    [Authorize]
    [Route("api/[controller]")]
    [ApiController]
    public class UserSettingsController : ControllerBase
    {
        private readonly UserRepository _userRepository;
        private readonly ILogger<UserSettingsController> _logger;

        public UserSettingsController(IConfiguration configuration, ILogger<UserSettingsController> logger)
        {
            _userRepository = new UserRepository(configuration);
            _logger = logger;
        }

        [HttpGet("{uid}")]
        public IActionResult GetUserSettings(string uid)
        {
            try
            {
                var userSettings = _userRepository.GetUserSettings(uid);

                if (userSettings == null)
                    return NotFound("User not found");

                return Ok(userSettings);
            }
            catch (Exception e)
            {
                _logger.LogError($"Exception thrown while getting user settings: {e.Message}");
            }

            return BadRequest("Could not find user");
        }

        [HttpPost("update")]
        public async Task<IActionResult> UpdateUserSettings([FromBody] User user)
        {
            try
            {
                var dbUser = _userRepository.GetActivatedUserByUsername(user.UserName);
                if (dbUser == null)
                {
                    return Ok();
                }

                dbUser.PhoneNumber = user.PhoneNumber;
                dbUser.EmailNotification = user.EmailNotification;
                dbUser.SmsNotification = user.SmsNotification;

                await _userRepository.UpdateUserAsync(dbUser);

                return Ok();
            }
            catch (Exception e)
            {
                _logger.LogError($"Exception thrown while updating user settings: {e.Message}");
            }

            return BadRequest("Unable to update user settings");
        }
    }
}