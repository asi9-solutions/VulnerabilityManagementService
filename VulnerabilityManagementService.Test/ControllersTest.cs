using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Moq;
using VulnerabilityManagementService.Repository;
using Xunit;
using Microsoft.Extensions.Logging;
using VulnerabilityManagementService.Controllers;
using VulnerabilityManagementService.Model;

namespace VulnerabilityManagementService.Test
{
    public class ControllersTest
    {
        [Fact]
        public async Task Test1_ProjectController_GetAllProjects()
        {
            // Arrange
            var mockRepo = new Mock<IMongoDbManager>();
            var mockLogger = new Mock<ILogger<ProjectController>>();

            mockRepo.Setup(repo => repo.GetAllProjects()).ReturnsAsync(new List<Project>());
            var projectController = new ProjectController(mockRepo.Object, mockLogger.Object);

            // Act
            var result = await projectController.GetAllProjects();

            // Assert            
            Assert.IsType<OkObjectResult>(result);
        }

        [Fact]
        public async Task Test2_VulnerabilityController_GetAllVulnerabilities()
        {
            // Arrange
            var mockRepo = new Mock<IMongoDbManager>();
            var mockLogger = new Mock<ILogger<VulnerabilityController>>();

            mockRepo.Setup(repo => repo.GetAllVulnerabilities()).ReturnsAsync(new List<Vulnerability>());
            var vulnerabilityController = new VulnerabilityController(mockRepo.Object, mockLogger.Object);

            // Act
            var result = await vulnerabilityController.GetAllVulnarability();

            // Assert            
            Assert.IsType<OkObjectResult>(result);
        }

        [Fact]
        public async Task Test3_VulnerabilityController_GetVulnerabilitiesByProjectId()
        {
            // Arrange
            var mockRepo = new Mock<IMongoDbManager>();
            var mockLogger = new Mock<ILogger<VulnerabilityController>>();

            mockRepo.Setup(repo => repo.GetVulnerabilitiesByProjectId(1)).ReturnsAsync(new List<Vulnerability>());
            var vulnerabilityController = new VulnerabilityController(mockRepo.Object, mockLogger.Object);

            // Act
            var result = await vulnerabilityController.GetVulnerabilityByProject(1);

            // Assert            
            Assert.IsType<OkObjectResult>(result);

        }
    }
}

